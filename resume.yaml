---
版本: 20180615
链接: https://github.com/DZL1943/public/blob/master/resume.yaml
关键词:
  - Python
  - 云计算(OpenStack)
  - 运维开发(DevOps)
  - Docker
  - 分布式系统 中间件

基本信息:
  姓名: 刘德忠
  出生日期: 1994.1
  婚姻状况: 未婚
  政治面貌: 团员
  籍贯: 江西赣州
  民族: 汉
  住址: 上海
  联系方式:
    - 电话: 
    - email: ldz1943@163.com
  家庭成员:

教育背景:
  - 2012.9-2016.6: 南昌大学-软件工程本科

工作履历:
  - 2018.1-2018.6:
    公司: 华云数据-上海
    职位: DevOps工程师
    工作内容:
      - jenkins打包自动化: 现有一套基于jenkins view的打包构建流, 但是每次小版本迭代都要项目经理知会并确认patch已合入后才能打包, 效率低下, 自动化程度不够, 并发支持不足, 复用性 扩展性 可维护性不好. 为此我主动提出优化, 使用pipeline语法为每个工程编写了独立的构建任务, 使其同时支持多版本多分支构建 本地构建 gerrit构建 release构建等, 并且流程可扩展test deploy等等, 完全可以由项目本身人员自主操作.
      - gerrit门禁:
      - tempest: 背景是当前手工测试非常耗费时间和人力, 严重影响迭代效率, 上级提出要采用社区的方案, 比如tempest rally, 我接手了tempest, 因为以前有过接触. 详细阅读了官方文档后, 我迅速掌握了其部署方式和基本用法, 还编写了jenkins自动化任务, 前期时间主要耗费在调试配置上. 后续先后处理了报告展示 在虚环境中运行 用subunit先后替代pytest ostestr运行 分析报错case 筛选比对需要屏蔽的case等等问题. 因为这边的代码相对社区原生有改动, 涉及服务众多, 而此事只我一人负责, 所有的问题需要我去发现和解决根本是不现实的.
      - 开发/测试环境部署和维护:
      - 容器技术预研:
  - 2016.5-2017.12: 
    公司: 软通动力-杭州
    职位: Python开发工程师
    工作内容:  # 外包在华云杭研做云计算基础服务开发, 涉及模块 keystone rabbitmq gaussdb ntp log healthcheck等
      - 从一个模块的测试用例开始: 因为初次接触云计算这个庞大的领域, 一开始我在CICD小组和其中的外包人员一起做自研模块自动化用例的补充工作. 我一开始负责的模块是信息收集, 这是一个相对庞大的模块, 其功能包含四个小部分, 信息收集 健康检查 审计 ostf. 我详细研读了该模块的代码, 并和其它模块的做对比交叉学习, 觉得其有许多可优化的空间, 就这样越钻越熟, 期间还和导师一起实现了几个小功能.
      - 转入基础服务组, 跟随版本迭代: 在某个新版本开始, 我和其它几人一起转入基础服务组, 负责自己熟悉的模块, 期间主要是跟随版本迭代做需求, 解决问题单. 渐渐地我对该模块已经非常熟悉了, 对于组内的其余模块我也先后熟悉了起来, 并且我利用业余时间积极学习原生openstack, 终于从keystone开始找到突破口.
      - 2017.5-2017.11 推荐在运维小组oncall现网(五朵公有云)问题: 刚来时, 包括我就两人, 他负责安装部署, 我负责基础服务, 虚拟机上层问题转接给其它部门. 在此期间我迅速掌握兄弟部门(安装部署)的业务知识, 对原项目组的知识也有了更深层的认识. 在现网问题接口的6个月里,先后自主攻关问题10余个, 并主动学习了运维和openstack知识.
      - 回归项目组做rabbitmq开发:

求职意向:
  地点:  # 暂无要求, 以下是优先项
    - 深圳
    - 杭州
  薪资: 10k+  # 主要考虑团队发展
  行业:
  职能: 技术研发
  岗位:
    - Python开发工程师
    - 运维开发(DevOps)工程师
    - 云计算开发/运维工程师  # 云计算是一个非常有挑战和前景的领域，它既要求扎实全面的计算机基础知识，同时又要求极高的编程功底和基础运维能力，作为 IaaS，它掌管全部 IT 基础设施并为其上的大规模应用提供高效稳定的运行环境。云计算和 AI 就是运维的未来，也是整个 IT 业未来发展的必然趋势。
  Why Me:
    - 快速学习能力(理解计算机底层运作原理, 理解分布式系统, 爱好通过阅读源码分析解决问题)
    - 随和包容, 诚信正直
    - 工作认真负责, 有条理, 务实, 有责任心
    - 善于规划, 有冒险精神
  Why You:
    - 行业发展前景
    - 企业文化
    - 工程师文化
    - leader & team
    - 工作环境

职业素质:
  - CET4
  - 专业技能:
    基础知识:
      - 体系结构
      - 操作系统
      - 编译原理
      - 算法
      - 网络
    编程平台:  # C - Python/Scala - Lisp
      - JavaScript
      - C
      - Java
      - Python:  # since 2014
        数据结构:
          - list
          - tuple
          - dict
          - set
          - collections
          - queue
          - heapq
        高级语法:
          - 列表、字典推导
          - 装饰器
          - 生成器
          - 上下文管理器
          - 协议方法
          - 描述符
          - metaclass
          - async
        标准库:
          - os, sys, pdb, traceback
          - threading, multiprocessing
          - itertools
          - logging
          - unittest
          - re, json
          - argparse, configparser, subprocess
          - socket, http, wsgiref, urllib
        第三方库:
          - requests
          - sqlalchemy
          - eventlet
          - paramiko
          - celery
          - supervisor
          - schema
          - cliff
          - pillow
          - webob, pecan, flask, django, tornado, twisted, scrapy
          - numpy, scipy, matplotlib, scikit-learn
        venv & tox:
        jupyter:
      - Erlang
      - Lisp
    技术领域:
      - Web
      - App
      - 游戏
      - Qt
      - 中间件:
        - ntp
        - syslog
        - postgresql
        - rabbitmq
        - apache
        - nginx
        - haproxy
        - lvs
        - keepalived
        - corosync
        - etcd
        - redis
      - DevOps:
        - jenkins
        - ansible
        - docker:
          - CLI
          - image & dockerfile
          - container
          - network
          - volume
          - Machine Compose Swarm
          - k8s:
            组件:
              - kubernetes-master
                - kube-apiserver
                - kube-controller-manager
                - kube-scheduler
              - kubernetes-node
                - kubelet
                - kube-proxy
              - kubernetes-client
                - kubectl
            概念:
              - service
              - pod/container
              - node
            原理:
            部署:
              - kubespray
              - RKE
        - zabbix
        - elasticsearch
      - OpenStack:  # https://www.openstack.org/software/
        - keystone:
          - 概念:
            - user
            - group
            - credential
              - password
              - token
                - pki
                - fernet
            - role  # 全局唯一
            - policy
            - project
            - domain  # user group project 在domain内唯一
            - endpoint
            - service
            - region  # 每个region下可以有独立的openstack部署及对应的endpoint, keystone可以跨region
          - keystoneauth
          - keystonemiddleware
        - glance
        - nova:
          - 组件:
            - nova-api
            - nova-compute
            - nova-scheduler
            - nova-conductor
          - nova-cell
          - 创虚拟机调用过程:
            - nova.api.openstack.compute:APIRouterV21.factory -> ROUTE_LIST '/servers/{id}/action'
            - nova.api.openstack.compute.servers.ServersController.create
            - nova.compute.API.create -> _create_instance
            - nova.conductor.api.ComputeTaskAPI.build_instances -> nova.conductor.rpcapi.ComputeTaskAPI.build_instances -> nova.conductor.manager.ComputeTaskManager.build_instances
            - nova.compute.rpcapi.ComputeAPI.build_and_run_instance -> nova.compute.manager.ComputeManager.build_and_run_instance -> _do_build_and_run_instance -> _build_and_run_instance
            - nova.virt.libvirt.driver.LibvirtDriver.spawn
        - neutron  # server - plugin - extension -agent
        # https://docs.openstack.org/neutron/latest/admin/config-ml2.html#ml2-driver-support-matrix
        - cinder
        - swift
      - 分布式存储
        - Ceph
      - 分布式计算
        - Spark
      - AI

业余爱好:  # 以下是我感兴趣的领域, 不代表已具备这些方面的特长
  - 运动, 健身
  - 阅读, 写作
  - 音乐
  - 数学
  - 经济

自我描述:
  出生农村, 从小由爷爷奶奶带大, 懂事, 成绩还行.
  高中时曾阅读大量文学 哲学 心理学名著, 养成了独立思考的习惯.(柏拉图 笛卡尔 弗洛伊德 尼采 马克思 霍布斯 维特根斯坦)
  大学就读的专业是软件工程(当初只想着融合计算机和生物技术改造人...), 最感兴趣的课程是计算机组成原理.
  我总是试图探究编程的本质, 学习那些通用的技术.
  在这个过程中我必须把持一个度, 既不能因为学习地太底层而导致放弃, 又不能仅仅停留在使用和整合技术的层面.
  技术都是不断更迭的, 唯有问题以及解决问题的思想永存.

  我从2014年(大二下)开始选择了Python, 至今仍是我的主力语言. 对于Python, 我最大的收获就是爱上了阅读源码, 同时也"不幸"染上了代码洁癖.
  喜欢并能够通过阅读源码分析解决问题是我在编程上学习能力的根本之一.
  对于编程语言, 一端是 C, 另一端是 Lisp, 在这之间我建议Python和Scala.
  后来我接触到OpenStack, 开启了分布式之旅.
  现在还学习Container技术.
  对DataScience也感兴趣.
  目前确定的技术方向是分布式系统, 类比具复杂性的社会系统, 希望由此能够穿越大数据, 抵达AI.

  以上便是我的编程之路.

  除了颜值和不怎么会聊天以外, 我是一个随和包容 诚信正直 守时务实 有责任心 善于规划和学习的人.(这些仅仅表明我是一个有原则 求上进的人, 成为怎样的人, 该做什么事, 这是我未来需要继续探索和努力的方面.)
